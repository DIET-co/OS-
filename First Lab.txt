#include<stdio.h> //program 1
void main()
{
  int pid;
   pid = fork();
}
//fork() will create one more process which is referred as child process. 
// This will share the same code, program counter and CPU register values.
// The only difference is that these two processes will have different address space (Base & Limit register values), Process ID and state.

#include<stdio.h> //program 2
void main()
{
  int pid;
   pid = fork();
   printf("Welcome");
}

output : welcome welcome
//Generally a C program when we execute with a single printf statement, only one output is supposed to come. But here 2 outputs are coming because, the fork() will create another child with same code. Due to this, same code will get execute twice.


#include<stdio.h> //program 3
void main()
{
  int pid;
   pid = fork();
   printf("Process ID:%d",pid);
}


output : 0 19823  
//Here 2 outputs are getting. 
Fork () returns 0 to the child address space and child's process ID to the parent process.
So PID variable in child will have a value 0 while PID variable in parent will have the process ID of child.

//program 4
Write a program to demonstrate getpid(), getppid() functions.

1.	void main()
2.	{
3.	int pid;
4.	pid = fork();

5.	if(pid>0) //parent process
6.	{
7.	printf(“Value of PID variable:%d\n”, pid); //print the return value of fork()
8.	printf(“Process ID:%d\n”, getpid()); //print the process id 
9.	printf(“Process IDof parent process:%d\n”, getppid());	
10.	}
11.	if(pid==0) //child process
12.	{
13.	printf(“Value of PID variable:%d\n”, pid); //print the return value of fork()
14.	printf(“Process ID:%d\n”, getpid()); //print the process id 
15.	printf(“Process IDof parent process:%d\n”, getppid());	
16.	}
17.	}



#include<stdio.h> //program 5
void main()
{
  int pid;
   pid = fork();
   if(pid==0)
     printf("Child");
   else
     printf("Parent");
}

output : Child Parent
//This pgm shows that if block is getting executed in child process and else block is getting executed



gedit pg1.c

gcc pg1.c

./a.out
