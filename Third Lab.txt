Write a program. Create a child process. Write another C program to check whether the given input string is palindrome or not. Compile and create the executable file (palindrome). Load this executable file into child address space using execlp() function.

#include<stdio.h> 
void main()
{
	int pid;
	pid = fork(); 
	if(pid==0) //child process
  	{
		execlp("/home/year2/prime","factorial",NULL); 
	}
	else if(pid>0)
	{
		printf(“\nParent is processing”);
		wait();
	}
	else
		printf("\nError");
}

#include<stdio.h> //prime program 
void main()
{
	int num, i, count=0;
	printf("\nEnter the number:");
	scanf("%d", &num);
	for(i=1;i<num;i++)
		if(num%i==0)
			count++;
	if(count==2)
	    	printf(“\nThe number %d is prime”, num);
	else
		printf(“\nThe number %d is not prime”, num);
}

Compile the above program. //gcc prime.c –o prime
Then run the first program.    


Write a program. Create two child processes. Load separate executable file into child address space using execlp() function. First child should be reading an array and displaying those elements which are divisible by 2 and 3. Second child should be reading an array and displaying those elements which are prime.


#include<stdio.h> 
void main()
{
	int pid1, pid2;
	pid1 = fork(); 
	if(pid1==0) //child process 1
  	{
		execlp("/home/year2/child1","child1",NULL); 
	}
	else if(pid>0)
	{
		//wait();
		pid2 = fork();
		if(pid2 == 0)
		{
			execlp("/home/year2/child2","child2",NULL); 
		}

	}
	else
		printf("\nError");
}

//child1.c
//program to display elements in array which are divisible by 2 and 3
//Compile it as gcc child1.c -o child1

//child2.c
//program to read an array and display those elelments which are prime numbers
//Compile it as gcc child2.c -o child2